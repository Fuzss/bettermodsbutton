//apply from: "https://raw.githubusercontent.com/Fuzss/modresources/main/gradle/${libs.versions.minecraft.get()}/neoforge.gradle"

apply plugin: "com.gradleup.shadow"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs("-Xms1G", "-Xmx4G", "-Dmixin.debug.export=true")
            vmArgs("-Dlog4j2.configurationFile=https://raw.githubusercontent.com/Fuzss/modresources/main/gradle/${libs.versions.minecraft.get()}/log4j.xml")
            vmArgs("-Dpuzzleslib.isDevelopmentEnvironment=true", "-D${modId}.isDevelopmentEnvironment=true")
        }
        client {
            client()
            setConfigName("NeoForge Client ${libs.versions.minecraft.get()}")
            programArgs("--username", "Player####")
        }
        server {
            server()
            setConfigName("NeoForge Server ${libs.versions.minecraft.get()}")
        }
        data {
            clientData()
            setConfigName("NeoForge Data ${libs.versions.minecraft.get()}")
            programArgs("--all", "--mod", modId)
            programArgs("--existing", project(":Common").file("src/main/resources").absolutePath)
            programArgs("--output", project(":Common").file("src/generated/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases/"
    }
    maven {
        name = "NeoForged Alpha"
        url = uri("https://prmaven.neoforged.net/NeoForge/pr2639")
        content {
            includeModule("net.neoforged", "neoforge")
        }
    }
    maven {
        name = "TheIllusiveC4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "OctoStudios"
        url = "https://maven.octo-studios.com/releases/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionNeoForge")) { transitive = false }

    // NeoForge
    neoForge libs.neoforge.neoforge

    if (libs.hasProperty("bettermodsbutton") && libs.bettermodsbutton.hasProperty("neoforge")) {
        modLocalRuntime(libs.bettermodsbutton.neoforge) { transitive = false }
    }
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

tasks.named("shadowJar") {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    from(shadowJar.archiveFile)
    dependsOn(shadowJar)
    archiveClassifier.set("")
    atAccessWideners.add("${modId}.accesswidener")
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn(commonSources)
    from commonSources.archiveFile.map { zipTree(it) }
}

tasks.modrinth.finalizedBy tasks.refreshUpdateJson
tasks.curseforge.finalizedBy tasks.refreshUpdateJson

dependencies {
    // Puzzles Lib
//    modApi libs.puzzleslib.neoforge
}
